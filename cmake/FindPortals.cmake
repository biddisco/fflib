find_package(PkgConfig QUIET)
pkg_check_modules(PC_PORTALS QUIET portals)

find_path(PORTALS_INCLUDE_DIR portals4.h
  HINTS
    ${PORTALS_ROOT} ENV PORTALS_ROOT
    ${PC_PORTALS_MINIMAL_INCLUDEDIR}
    ${PC_PORTALS_MINIMAL_INCLUDE_DIRS}
    ${PC_PORTALS_INCLUDEDIR}
    ${PC_PORTALS_INCLUDE_DIRS}
  PATH_SUFFIXES include)

find_library(PORTALS_LIBRARY NAMES portals libportals
  HINTS
    ${PORTALS_ROOT} ENV PORTALS_ROOT
    ${PC_PORTALS_MINIMAL_LIBDIR}
    ${PC_PORTALS_MINIMAL_LIBRARY_DIRS}
    ${PC_PORTALS_LIBDIR}
    ${PC_PORTALS_LIBRARY_DIRS}
  PATH_SUFFIXES lib lib64)

find_library(PORTALS_RUNTIME_LIBRARY NAMES portals_runtime libportals_runtime
  HINTS
    ${PORTALS_ROOT} ENV PORTALS_ROOT
    ${PC_PORTALS_MINIMAL_LIBDIR}
    ${PC_PORTALS_MINIMAL_LIBRARY_DIRS}
    ${PC_PORTALS_LIBDIR}
    ${PC_PORTALS_LIBRARY_DIRS}
  PATH_SUFFIXES lib lib64)

set(PORTALS_LIBRARIES ${PORTALS_LIBRARY} ${PORTALS_RUNTIME_LIBRARY})
set(PORTALS_INCLUDE_DIRS ${PORTALS_INCLUDE_DIR})

find_package_handle_standard_args(PORTALS DEFAULT_MSG
  PORTALS_LIBRARY PORTALS_INCLUDE_DIR)

get_property(_type CACHE PORTALS_ROOT PROPERTY TYPE)
if(_type)
  set_property(CACHE PORTALS_ROOT PROPERTY ADVANCED 1)
  if("x${_type}" STREQUAL "xUNINITIALIZED")
    set_property(CACHE PORTALS_ROOT PROPERTY TYPE PATH)
  endif()
endif()

mark_as_advanced(PORTALS_ROOT PORTALS_LIBRARY PORTALS_INCLUDE_DIR)


